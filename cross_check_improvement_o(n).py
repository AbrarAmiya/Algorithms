# -*- coding: utf-8 -*-
"""Cross Check Improvement: O(n).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XkPAC_Nuz0T8MvI5w9vPhYzKq0mc-iDV
"""

#  RIGHT
def cross(arr):
    max_cross = 0

    mid = len(arr) // 2

    for i in range(mid - 1, -1, -1):
        for j in range(mid, len(arr)):
            current_value = arr[i] + arr[j] ** 2
            max_cross = max(max_cross, current_value)

    return max_cross


def highest_value(arr):
    if len(arr) == 1:
        return arr[0]
    elif len(arr) == 2:
        return arr[0] + arr[1] ** 2

    mid = len(arr) // 2

    L = highest_value(arr[:mid])
    R = highest_value(arr[mid:])
    C = cross(arr)

    return max(L, R, C)

# Main code
A = [9,6,5,8,2]
N = len(A)

max_value = highest_value(A)
print(max_value)

'''Wrong'''
def highest_value(arr):
    if len(arr) == 1:
        return arr[0]
    elif len(arr) == 2:
        return arr[0] + arr[1] ** 2

    mid = len(arr) // 2

    L = highest_value(arr[:mid])
    R = highest_value(arr[mid:])

    C = cross(arr)

    return max(L, R, C)

def cross(arr):
    max_value = float('-inf')
    max_suffix = float('-inf')

    for num in reversed(arr):
        max_suffix = max(max_suffix, 0) + num
        max_value = max(max_value, max_suffix)

    return max_value


# Main code
A = [5,10,4,-3,1,6,-10,2]
N = len(A)


max_value = highest_value(A)
print(max_value)

'''Wrong'''
def cross(arr):
    max_cross = float('-inf')
    max_element = float('-inf')

    for num in arr:
        current_value = num + max_element ** 2
        max_cross = max(max_cross, current_value)
        max_element = max(max_element, num)

    return max_cross


def highest_value(arr):
    if len(arr) == 1:
        return arr[0]
    elif len(arr) == 2:
        return arr[0] + arr[1] ** 2

    mid = len(arr) // 2

    L = highest_value(arr[:mid])
    R = highest_value(arr[mid:])

    C = cross(arr)

    return max(L, R, C)


# Main code
A = [5, 10, 4, -3, 1, 6, -10, 2]
N = len(A)

max_value = highest_value(A)
print(max_value)

'''Wrong'''
def find_max_value(arr):
    max_value = float('-inf')
    max_element = arr[0]

    for num in arr[1:]:
        current_value = num + max_element**2
        max_value = max(max_value, current_value)

        if num > max_element:
            max_element = num

    return max_value

A = [5, 10, 4, -3, 1, 6, -10, 2]
max_value = find_max_value(A)
print(max_value)

'''Wrong'''
def cross(arr, low, mid, high):
    left_sum = float('-inf')
    sum = 0
    for i in range(mid, low - 1, -1):
        sum += arr[i]
        if sum > left_sum:
            left_sum = sum

    right_sum = float('-inf')
    sum = 0
    for i in range(mid + 1, high + 1):
        sum += arr[i]
        if sum > right_sum:
            right_sum = sum

    return left_sum + right_sum**2


def highest_value(arr, low, high):
    if low == high:
        return arr[low]
    mid = (low + high) // 2
    left = highest_value(arr, low, mid)
    right = highest_value(arr, mid + 1, high)
    crs = cross(arr, low, mid, high)
    return max(left, right, crs)


# Main code
A = [5, 10, 4, -3, 1, 6, -10, 2]
N = len(A)

max_value = highest_value(A, 0, N - 1)
print(max_value)

##### R I G H T ########### R I G H T ########### R I G H T ########### R I G H T ########### R I G H T ########### R I G H T ######



def maxSum(arr):

  if len(arr) == 1:
    return float("-inf")
  elif len(arr) == 2:
    return arr[0] + arr[1]**2


  mid = len(arr)//2
  lefthalf = maxSum(arr[:mid])
  righthalf = maxSum(arr[mid:])

  max_i = max(arr[:mid])
  max_j = max([num ** 2 for num in arr[mid:]])


  return max(lefthalf, righthalf, max_i + max_j)

A = [5,10,4,-3,1,6,-10,2]
max_value = maxSum(A)
print(max_value)
B = [-5,-2,-6,-7,-1,8,2]
max_value2 = maxSum(B)
print(max_value2)
C = [9,6,5,8,2]
max_value3 = maxSum(C)
print(max_value3)


##### R I G H T ########### R I G H T ########### R I G H T ########### R I G H T ########### R I G H T ########### R I G H T ######

'''Wrong'''
def findMaxSum(N, A):
    max_val = float()
    max_sum = float()

    for i in range(N):
        num = A[i]
        cur_sum = num + max_val
        if cur_sum > max_sum:
            max_sum = cur_sum
        if num * num > max_val:
            max_val = num * num

    return max_sum
A = [-5,-2,-6,-7,-1,8,2]
N = len(A)
result = findMaxSum(N, A)
print(result)

max_sum = float('-inf')
for i in range(N):
    for j in range(i + 1, N):
        current_sum = A[i] + A[j] ** 2
        if current_sum > max_sum:
            max_sum = current_sum

A = [-5, -2, -6, -7, -1, 8, 2]
max_j = max(A[2:]) ** 2
result = [num ** 2 for num in A[3:]]

print(max_j)
print(result)

